<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        // 练习1：利用对象封装自己的数学对象 里面有 PI 最大值和最小值
        var myMath = {
            PI: 3.141592653,
            max: function () {
                var max = arguments[0];
                for (var i = 1; i < arguments.length; i++) {
                    if (arguments[i] > max) {
                        max = arguments[i];
                    }
                }
                return max;
            },
            min: function () {
                var min = arguments[0];
                for (var j = 1; j < arguments.length; j++) {
                    if (arguments[j] < min) {
                        min = arguments[j];
                    }
                }
                return min;
            }
        }
        console.log(myMath.PI);
        console.log(myMath.max(88, 42, 9, 66));
        console.log(myMath.min(88, 42, 9, 66));

        // 练习2：程序随机生成一个 1~ 10 之间的数字，并让用户输入一个数字，
        // 1. 如果大于该数字，就提示，数字大了，继续猜；
        // 2. 如果小于该数字，就提示数字小了，继续猜；
        // 3. 如果等于该数字，就提示猜对了， 结束程序。
        //执行思路：
        // 随机生成一个1~10 的整数  我们需要用到 Math.random() 方法。
        // 需要一直猜到正确为止，所以一直循环。
        // 用while 循环合适更简单。
        // 核心算法：使用 if  else if 多分支语句来判断大于、小于、等于。 
        /* function getRandom(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        var random = getRandom(1, 10);
        while (true) {// 死循环
            var num = prompt('输入一个1-10之间的数字：');
            if (num > random) {
                alert('数字大了，继续猜');
            } else if (num < random) {
                alert('数字小了，继续猜');
            } else {
                alert('猜对了');
                break;// 退出整个循环结束程序
            }
        } */

        //要求用户猜 1-50 之间一个数字，只有10次机会
        /* function getRandom(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        var random = getRandom(1, 50);
        for (var i = 1; i <= 10; i++) {
            var num = prompt('输入一个1-50之间的数字：')
            if (num > random) {
                alert('数字大了，继续猜');
            } else if (num < random) {
                alert('数字小了，继续猜');
            } else {
                alert('猜对了');
            }
        } */

        //练习3：写一个2022年 5月 31日 星期二
        var date = new Date();
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var dates = date.getDate();
        var arr = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];// 通过数组索引号返回
        var day = date.getDay();
        console.log('今天是' + year + '年' + month + '月' + dates + '日   ' + arr[day]);

        //练习4：封装一个函数返回当前的时分秒 08:08:08 
        function getTimer() {
            var time = new Date();
            var h = time.getHours();
            h = h < 10 ? '0' + h : h;
            var m = time.getMinutes();
            m = m < 10 ? '0' + m : m;
            var s = time.getSeconds();
            s = s < 10 ? '0' + s : s;
            return h + ':' + m + ':' + s;
        }
        console.log(getTimer());

        // 练习5：倒计时效果
        // 核心算法：1. 输入的时间减去现在的时间就是剩余的时间，即倒计时 ，但是不能拿着时分秒相减，比如 05 分减去25分，结果会是负数的。
        // 2. 用时间戳来做。用户输入时间总的毫秒数减去现在时间的总的毫秒数，得到的就是剩余时间的毫秒数。
        // 3. 把剩余时间总的毫秒数转换为天、时、分、秒 （时间戳转换为时分秒）
        // d = parseInt(总秒数 / 60 / 60 / 24);    //  计算天数
        // h = parseInt(总秒数 / 60 / 60 % 24)   //   计算小时
        // m = parseInt(总秒数 / 60 % 60);     //   计算分数
        // s = parseInt(总秒数 % 60);           //   计算当前秒数 
        function countDown(time) {
            var nowTime = +new Date();// 返回的是当前时间总的毫秒数
            var inputTime = +new Date(time);// 返回的是输入时间总的毫秒数
            var times = (inputTime - nowTime) / 1000;// times 返回是剩余时间总的秒数
            var d = parseInt(times / 60 / 60 / 24);// 天
            d = d < 10 ? '0' + d : d;
            var h = parseInt(times / 60 / 60 % 24);//小时
            h = h < 10 ? '0' + h : h;//用三元表达式实现前面 + 0 的效果
            var m = parseInt(times / 60 % 60);//分
            m = m < 10 ? '0' + m : m;
            var s = parseInt(times % 60);  // 当前秒数（秒一直在变化）
            s = s < 10 ? '0' + s : s;
            return d + '天' + h + '小时' + m + '分' + s + '秒';
        }
        console.log(countDown('2022-11-11 20:01:01'));

        //练习6：有一个包含工资的数组[1500, 1200, 2000, 2100, 1800]，要求把数组中工资超过2000的删除，剩余的放到新数组里面
        var arr = [1500, 1200, 2000, 2100, 1800];
        var newArr = [];
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] < 2000) {
                //newArr[newArr.length] = arr[i];
                newArr.push(arr[i]);
            }
        }
        console.log(newArr);

        //案例1：数组去重（重点案例 面试题！！）
        //有一个数组['c', 'a', 'z', 'a', 'x', 'a', 'x', 'c', 'b']，要求去除数组中重复的元素。
        // 目标：把旧数组里面不重复的元素选取出来放到新数组中，重复的元素只保留一个，放到新数组中去重。
        // 核心算法：我们遍历旧数组，然后拿着旧数组元素去查询新数组，如果该元素在新数组里面没有出现过，我们就添加，否则不添加。
        // 我们怎么知道该元素没有存在？  利用 新数组.indexOf(数组元素)  如果返回时 -1 就说明 新数组里面没有该元素  

        //封装一个 去重的函数 unique 独一无二的
        function unique(arr) {
            var newArr = [];
            for (var i = 0; i < arr.length; i++) {
                if (newArr.indexOf(arr[i]) === -1) {
                    //newArr[newArr.length] = arr[i];
                    newArr.push(arr[i]);
                }
            }
            return newArr;
        }
        var demo = unique(['c', 'a', 'z', 'a', 'x', 'a', 'x', 'c', 'b']);
        console.log(demo);

        //案例2：返回字符位置(面试题) 查找字符串"abcoefoxyozzopp"中所有o出现的位置以及次数
        // 核心算法：先查找第一个o出现的位置
        // 然后 只要indexOf 返回的结果不是 -1 就继续往后查找
        // 因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找 
        var str = 'abcoefoxyozzopp';
        var index = str.indexOf('o');
        var num = 0;
        while (index !== -1) {
            console.log(index);//先输出第一次查找结果，再查找输出第二个 num++ 同理
            num++;
            index = str.indexOf('o', index + 1);
        }
        console.log('o出现的次数是' + num);

        //['red', 'blue', 'red', 'green', 'pink','red'], 求 red 出现的位置和次数
        var arr = ['red', 'blue', 'red', 'green', 'pink', 'red'];
        var index = arr.indexOf('red');
        var num = 0;
        while (index !== -1) {
            console.log(index);
            num++;
            index = arr.indexOf('red', index + 1);
        }
        console.log('red 出现的次数为' + num);

        // 案例3：判断一个字符串 'abcoefoxyozzopp' 中出现次数最多的字符，并统计其次数。
        // 核心算法：利用 charAt() 遍历这个字符串
        // 把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1
        // 遍历对象，得到最大值和该字符 
        var str = 'abcoefoxyozzopp';
        var o = {};
        for (var i = 0; i < str.length; i++) {
            var chars = str.charAt(i);//chars是字符串每一个字符
            if (o[chars]) { //o[chars]得到的是属性值
                o[chars]++;
            } else {
                o[chars] = 1;
            }
        }
        //遍历对象
        var max = 0;
        var ch = '';
        for (var k in o) {// k 得到的是属性名 o[k] 得到的是属性值
            if (o[k] > max) {
                max = o[k];
                ch = k;
            }
        }
        console.log(max);
        console.log('出现次数最多的字符是' + ch);

        //案例4：给定一个字符串，如："abaasdffggghhjjkkgfddsssss3444343"，问题如下： 
        // 1、 字符串的长度  (str.length)
        var str = "abaasdffggghhjjkkgfddsssss3444343";
        console.log(str.length);

        // 2、 取出指定位置的字符，如：0,3,5,9等 
        console.log(str.charAt(8));

        // 3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等 
        console.log(str.indexOf('d'));

        // 4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法
        /* while (str.indexOf('g') !== -1) {
            str = str.replace('g', '22');
        }
        console.log(str); */

        // 5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串 
        console.log(str.slice(1, 6));

        // 6、 找出以上字符串中出现次数最多的字符和出现的次数
        // var o = {};
        // for (var i = 0; i < str.length; i++) {
        //     var chars = str.charAt(i);
        //     if (o[chars]) {
        //         o[chars]++;
        //     } else {
        //         o[chars] = 1;
        //     }
        // }
        // var max = 0;
        // var ch = '';
        // for (var k in o) {
        //     if (o[k] > max) {
        //         max = o[k];
        //         ch = k;
        //     }
        // }

        // console.log(max);
        // console.log('出现次数最多的字符是' + ch);

        // 7、 遍历字符串，并将遍历出的字符两头添加符号"@"

        var ch = '@';
        for (var i = 0; i < str.length; i++) {
            ch = ch + str.charAt(i) + '@';


        }
        console.log(ch);
    </script>
</head>

<body>

</body>

</html>